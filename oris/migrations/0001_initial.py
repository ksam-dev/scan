# Generated by Django 4.2.23 on 2025-08-31 17:06

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import oris.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('user', 'Utilisateur'), ('validator', 'Validateur'), ('admin', 'Administrateur'), ('super_admin', 'Super Administrateur')], default='user', max_length=20, verbose_name='Rôle')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone')),
                ('department', models.CharField(blank=True, max_length=100, verbose_name='Département')),
                ('job_title', models.CharField(blank=True, max_length=100, verbose_name='Poste')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/', verbose_name='Photo de profil')),
                ('email_verified', models.BooleanField(default=False, verbose_name='Email vérifié')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='Dernière activité')),
                ('two_factor_enabled', models.BooleanField(default=False, verbose_name='2FA activé')),
                ('groups', models.ManyToManyField(blank=True, help_text="Les groupes auxquels appartient l'utilisateur.", related_name='custom_user_set', related_query_name='custom_user', to='auth.group', verbose_name='Groupes')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['username'],
            },
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Nom')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('processing', 'En cours de traitement'), ('completed', 'Terminé'), ('failed', 'Échec'), ('partial', 'Partiel')], default='pending', max_length=20, verbose_name='Statut')),
                ('total_documents', models.IntegerField(default=0, verbose_name='Total des documents')),
                ('processed_documents', models.IntegerField(default=0, verbose_name='Documents traités')),
                ('priority', models.IntegerField(choices=[(1, 'Basse'), (2, 'Normale'), (3, 'Haute')], default=1, verbose_name='Priorité')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Métadonnées')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Date de completion')),
            ],
            options={
                'verbose_name': 'Lot',
                'verbose_name_plural': 'Lots',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('original_filename', models.CharField(max_length=255, verbose_name='Nom de fichier original')),
                ('file_path', models.FileField(upload_to=oris.models.document_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png', 'tiff', 'tif', 'bmp'])], verbose_name='Fichier')),
                ('document_type', models.CharField(choices=[('pdf', 'PDF'), ('image', 'Image'), ('scan', 'Scan'), ('text', 'Texte')], max_length=10, verbose_name='Type de document')),
                ('status', models.CharField(choices=[('uploaded', 'Uploadé'), ('processing', 'En cours de traitement'), ('ocr_completed', 'OCR terminé'), ('validation_pending', 'Validation en attente'), ('validated', 'Validé'), ('failed', 'Échec')], default='uploaded', max_length=20, verbose_name='Statut')),
                ('total_pages', models.IntegerField(default=0, verbose_name='Total des pages')),
                ('processed_pages', models.IntegerField(default=0, verbose_name='Pages traitées')),
                ('file_size', models.BigIntegerField(verbose_name='Taille du fichier')),
                ('mime_type', models.CharField(blank=True, max_length=100, verbose_name='Type MIME')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Métadonnées')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='oris.batch')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nom')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('max_users', models.IntegerField(default=10, verbose_name="Nombre maximum d'utilisateurs")),
                ('max_storage', models.BigIntegerField(default=10737418240, verbose_name='Espace de stockage maximum (octets)')),
                ('subscription_plan', models.CharField(choices=[('free', 'Gratuit'), ('basic', 'Basique'), ('pro', 'Professionnel'), ('enterprise', 'Entreprise')], default='free', max_length=20, verbose_name="Plan d'abonnement")),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
            ],
            options={
                'verbose_name': 'Organisation',
                'verbose_name_plural': 'Organisations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('page_number', models.IntegerField(verbose_name='Numéro de page')),
                ('image_path', models.FileField(upload_to=oris.models.page_upload_path, verbose_name="Chemin de l'image")),
                ('status', models.CharField(choices=[('extracted', 'Extraite'), ('ocr_pending', 'OCR en attente'), ('ocr_processing', 'OCR en cours'), ('ocr_completed', 'OCR terminé'), ('validation_pending', 'Validation en attente'), ('validated', 'Validée'), ('failed', 'Échec')], default='extracted', max_length=20, verbose_name='Statut')),
                ('is_handwritten', models.BooleanField(blank=True, null=True, verbose_name='Écriture manuscrite')),
                ('width', models.IntegerField(default=0, verbose_name='Largeur')),
                ('height', models.IntegerField(default=0, verbose_name='Hauteur')),
                ('dpi', models.IntegerField(blank=True, null=True, verbose_name='DPI')),
                ('quality_score', models.FloatField(blank=True, null=True, verbose_name='Score de qualité')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='oris.document')),
            ],
            options={
                'verbose_name': 'Page',
                'verbose_name_plural': 'Pages',
                'ordering': ['document', 'page_number'],
                'unique_together': {('document', 'page_number')},
            },
        ),
        migrations.CreateModel(
            name='HandwritingSample',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image_crop', models.FileField(upload_to=oris.models.handwriting_sample_upload_path, verbose_name="Extrait d'image")),
                ('ground_truth_text', models.TextField(verbose_name='Texte de vérité terrain')),
                ('language', models.CharField(default='fra', max_length=10, verbose_name='Langue')),
                ('writing_style', models.CharField(blank=True, max_length=50, verbose_name="Style d'écriture")),
                ('quality_score', models.FloatField(blank=True, null=True, verbose_name='Score de qualité')),
                ('used_for_training', models.BooleanField(default=False, verbose_name="Utilisé pour l'entraînement")),
                ('training_model_version', models.CharField(blank=True, max_length=50, verbose_name="Version du modèle d'entraînement")),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='handwriting_samples', to='oris.page')),
            ],
            options={
                'verbose_name': "Échantillon d'écriture",
                'verbose_name_plural': "Échantillons d'écriture",
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExportProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('format', models.CharField(choices=[('json', 'JSON'), ('xml', 'XML'), ('csv', 'CSV'), ('pdf', 'PDF'), ('text', 'Texte')], max_length=10, verbose_name='Format')),
                ('field_mapping', models.JSONField(default=dict, verbose_name='Mapping des champs')),
                ('include_metadata', models.BooleanField(default=True, verbose_name='Inclure les métadonnées')),
                ('include_annotations', models.BooleanField(default=False, verbose_name='Inclure les annotations')),
                ('compression_enabled', models.BooleanField(default=False, verbose_name='Compression activée')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='export_profiles', to='oris.organization')),
            ],
            options={
                'verbose_name': "Profil d'export",
                'verbose_name_plural': "Profils d'export",
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='batch',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batches', to='oris.organization'),
        ),
        migrations.AddField(
            model_name='batch',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batches', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='APIKey',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('key', models.CharField(max_length=64, unique=True, verbose_name='Clé')),
                ('secret', models.CharField(max_length=64, verbose_name='Secret')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('permissions', models.JSONField(default=dict, verbose_name='Permissions')),
                ('rate_limit', models.IntegerField(default=1000, verbose_name='Limite de requêtes')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name="Date d'expiration")),
                ('last_used', models.DateTimeField(blank=True, null=True, verbose_name='Dernière utilisation')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to='oris.organization')),
            ],
            options={
                'verbose_name': 'Clé API',
                'verbose_name_plural': 'Clés API',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('annotation_type', models.CharField(choices=[('correction', 'Correction'), ('field_extraction', 'Extraction de champ'), ('validation', 'Validation'), ('comment', 'Commentaire'), ('highlight', 'Surlignage')], max_length=20, verbose_name="Type d'annotation")),
                ('original_text', models.TextField(blank=True, verbose_name='Texte original')),
                ('corrected_text', models.TextField(blank=True, verbose_name='Texte corrigé')),
                ('field_name', models.CharField(blank=True, max_length=100, verbose_name='Nom du champ')),
                ('field_value', models.TextField(blank=True, verbose_name='Valeur du champ')),
                ('bounding_box', models.JSONField(default=dict, verbose_name='Boîte de délimitation')),
                ('confidence', models.FloatField(blank=True, null=True, verbose_name='Confiance')),
                ('is_accepted', models.BooleanField(default=False, verbose_name='Accepté')),
                ('comment', models.TextField(blank=True, verbose_name='Commentaire')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotations', to='oris.page')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Annotation',
                'verbose_name_plural': 'Annotations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='utilisateur',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='oris.organization', verbose_name='Organisation'),
        ),
        migrations.AddField(
            model_name='utilisateur',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Permissions spécifiques pour cet utilisateur.', related_name='custom_user_set', related_query_name='custom_user', to='auth.permission', verbose_name='Permissions utilisateur'),
        ),
        migrations.CreateModel(
            name='OCRResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('engine', models.CharField(choices=[('tesseract', 'Tesseract'), ('easyocr', 'EasyOCR'), ('paddleocr', 'PaddleOCR'), ('trocr', 'TrOCR'), ('kraken', 'Kraken'), ('donut', 'Donut'), ('custom', 'Personnalisé')], max_length=20, verbose_name='Moteur OCR')),
                ('engine_version', models.CharField(blank=True, max_length=50, verbose_name='Version du moteur')),
                ('raw_text', models.TextField(verbose_name='Texte brut')),
                ('confidence_score', models.FloatField(blank=True, null=True, verbose_name='Score de confiance')),
                ('processing_time', models.FloatField(verbose_name='Temps de traitement (secondes)')),
                ('language', models.CharField(default='fra', max_length=10, verbose_name='Langue')),
                ('bounding_boxes', models.JSONField(default=dict, verbose_name='Boîtes de délimitation')),
                ('extracted_fields', models.JSONField(default=dict, verbose_name='Champs extraits')),
                ('post_processed_text', models.TextField(blank=True, verbose_name='Texte post-traité')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ocr_results', to='oris.page')),
            ],
            options={
                'verbose_name': 'Résultat OCR',
                'verbose_name_plural': 'Résultats OCR',
                'ordering': ['-created_at'],
                'unique_together': {('page', 'engine')},
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('upload', 'Upload'), ('ocr_start', 'Début OCR'), ('ocr_complete', 'OCR terminé'), ('validation_start', 'Début validation'), ('validation_complete', 'Validation terminée'), ('export', 'Export'), ('error', 'Erreur'), ('login', 'Connexion'), ('logout', 'Déconnexion'), ('create', 'Création'), ('update', 'Modification'), ('delete', 'Suppression')], max_length=20, verbose_name='Action')),
                ('resource_type', models.CharField(max_length=50, verbose_name='Type de ressource')),
                ('resource_id', models.UUIDField(verbose_name='ID de la ressource')),
                ('details', models.JSONField(default=dict, verbose_name='Détails')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Adresse IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Horodatage')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': "Journal d'audit",
                'verbose_name_plural': "Journaux d'audit",
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['timestamp', 'action'], name='oris_auditl_timesta_c2ac9c_idx'), models.Index(fields=['resource_type', 'resource_id'], name='oris_auditl_resourc_6f65e6_idx')],
            },
        ),
    ]
