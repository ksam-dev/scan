"""
Django settings for scan project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-sdjn#v@92tl_59h70gl))-%*q5rg2xp569syv_9!q)3^wj*r+q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'oris',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'scan.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'scan.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# Configuration de la base de données MySQL
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'oris_db',  # Nom de la base de données
#         'USER': 'admin_',  # Utilisateur MySQL
#         'PASSWORD': 'Chryso',  # Ton mot de passe MySQL
#         'HOST': 'localhost',  # Hôte, en local
#         'PORT': '3306',  # Port de MySQL, par défaut 3306
#         'OPTIONS': {
#             'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",  # Pour activer le mode strict
#         },
#     }
# }
AUTH_USER_MODEL = 'oris.Utilisateur'  # Utiliser le modèle utilisateur personnalisé


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'

# USE_I18N = True

# USE_TZ = True
## Liste des fuseaux horaires disponibles
# import zoneinfo
# print(sorted(zoneinfo.available_timezones()))
##

# Le nom d'utilisateur que vous choisirez sur PythonAnywhere
# Mettez votre futur nom d'utilisateur ici. Par exemple, 'monprojetoris'.
PYTHONANYWHERE_USERNAME = 'oris-scan-pythonanywhere'
PYTHONANYWHERE_DOMAIN = f'{PYTHONANYWHERE_USERNAME}.pythonanywhere.com'
# POPPLER_PATH = r'F:\project\scan_project\poppler-25.07.0\Library\bin'
# ============================================================================
# CONFIGURATION DE CELERY
# ============================================================================
# # URL du broker (Redis, qui tourne par défaut sur le port 6379)
# CELERY_BROKER_URL = 'redis://localhost:6379/0'

# # URL du backend pour stocker les résultats des tâches (optionnel mais recommandé)
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

# # Accepter le contenu de type json
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
CELERY_BROKER_URL = 'sqla+sqlite:///' + os.path.join(BASE_DIR, 'celery-broker.sqlite')
CELERY_RESULT_BACKEND = 'db+sqlite:///' + os.path.join(BASE_DIR, 'celery-results.sqlite')

# NOUVEAU : Variable pour contrôler le mode de développement
# Mettez-la à False pour utiliser les vrais modèles d'IA
DEV_MODE_MOCK_OCR = False # True pour le mode développement, False pour la production

# Fuseau horaire pour Celery
CELERY_TIMEZONE = 'Africa/Kinshasa' # Ou le même que votre TIME_ZONE

LANGUAGE_CODE = 'fr-fr'
TIME_ZONE = 'Africa/Kinshasa'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Static files (CSS, JavaScript, Images)
# STATIC_URL = '/static/'
# STATIC_ROOT = BASE_DIR / 'staticfiles'
# STATICFILES_DIRS = [
#     BASE_DIR / 'static',
# ]
STATIC_ROOT = BASE_DIR / "staticfiles"
# L'URL pour accéder à ces fichiers statiques
STATIC_URL = '/static/'
# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Login/Logout URLs
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/login/'

# Messages framework
from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'error',
}

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'oris.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'oris_app': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Créer le dossier logs s'il n'existe pas
os.makedirs(BASE_DIR / 'logs', exist_ok=True)

# Configuration pour les uploads de fichiers
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
FILE_UPLOAD_PERMISSIONS = 0o644

# Configuration de sécurité pour la production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_REDIRECT_EXEMPT = []
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    X_FRAME_OPTIONS = 'DENY'

# Configuration des sessions
SESSION_COOKIE_AGE = 86400  # 24 heures
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_SAVE_EVERY_REQUEST = True

# Configuration CSRF
CSRF_COOKIE_AGE = 31449600  # 1 an
CSRF_COOKIE_HTTPONLY = True

# Configuration des emails (à adapter selon l'environnement)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'noreply@oris-ocr.com'
SERVER_EMAIL = 'admin@oris-ocr.com'

# Configuration pour les tâches asynchrones (Celery - optionnel)
# CELERY_BROKER_URL = 'redis://localhost:6379/0'
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = TIME_ZONE

# Configuration OCR (à adapter selon les besoins)
OCR_SETTINGS = {
    'ENGINE': 'tesseract',  # ou 'google_vision', 'aws_textract'
    'LANGUAGES': ['fra', 'eng'],
    'CONFIDENCE_THRESHOLD': 70,
    'MAX_FILE_SIZE': 50 * 1024 * 1024,  # 50MB
    'ALLOWED_EXTENSIONS': ['.pdf', '.jpg', '.jpeg', '.png', '.tiff', '.bmp'],
}

# Configuration des notifications
NOTIFICATION_SETTINGS = {
    'ENABLE_EMAIL_NOTIFICATIONS': True,
    'ENABLE_BROWSER_NOTIFICATIONS': True,
    'BATCH_COMPLETION_NOTIFY': True,
    'LOW_CONFIDENCE_THRESHOLD': 70,
}

# Configuration de cache (optionnel)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'oris-cache',
        'TIMEOUT': 300,
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# Configuration des permissions personnalisées
ORIS_PERMISSIONS = {
    'CAN_CREATE_BATCHES': 'oris.add_batch',
    'CAN_VALIDATE_DOCUMENTS': 'oris.change_document',
    'CAN_EXPORT_DATA': 'oris.export_data',
    'CAN_MANAGE_USERS': 'auth.change_user',
    'CAN_VIEW_ADMIN': 'oris.view_admin',
}

# Configuration des rôles utilisateur
USER_ROLES = {
    'USER': {
        'name': 'Utilisateur',
        'permissions': ['CAN_CREATE_BATCHES'],
    },
    'VALIDATOR': {
        'name': 'Validateur',
        'permissions': ['CAN_CREATE_BATCHES', 'CAN_VALIDATE_DOCUMENTS', 'CAN_EXPORT_DATA'],
    },
    'ADMIN': {
        'name': 'Administrateur',
        'permissions': ['CAN_CREATE_BATCHES', 'CAN_VALIDATE_DOCUMENTS', 'CAN_EXPORT_DATA', 'CAN_MANAGE_USERS', 'CAN_VIEW_ADMIN'],
    },
}
